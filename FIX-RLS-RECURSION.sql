-- =====================================================
-- CORRE√á√ÉO DA RECURS√ÉO INFINITA NAS POL√çTICAS RLS
-- =====================================================
-- Execute este SQL no Supabase Dashboard ‚Üí SQL Editor
-- Corrige problema de recurs√£o infinita nas pol√≠ticas da tabela users

\echo 'üîß CORRIGINDO RECURS√ÉO INFINITA NAS POL√çTICAS RLS...';
\echo '';

-- =====================================================
-- 1. REMOVER POL√çTICAS PROBLEM√ÅTICAS DA TABELA USERS
-- =====================================================

\echo '‚ùå Removendo pol√≠ticas problem√°ticas da tabela users...';

-- Remover pol√≠tica que causa recurs√£o
DROP POLICY IF EXISTS "users_admin_access" ON public.users;

-- =====================================================
-- 2. RECRIAR POL√çTICAS USERS SEM RECURS√ÉO
-- =====================================================

\echo '‚úÖ Recriando pol√≠ticas users sem recurs√£o...';

-- Pol√≠tica simples: Usu√°rios podem ver perfis p√∫blicos b√°sicos
CREATE POLICY "users_public_read" ON public.users
FOR SELECT USING (true);

-- Pol√≠tica: Usu√°rios podem editar apenas seus pr√≥prios dados
CREATE POLICY "users_own_update" ON public.users  
FOR UPDATE USING (auth.uid() = id::uuid);

-- Pol√≠tica: Admins t√™m acesso especial (sem recurs√£o)
-- Em vez de consultar a pr√≥pria tabela users, usa auth.jwt()
CREATE POLICY "users_admin_full_access" ON public.users
FOR ALL USING (
  auth.jwt() ->> 'role' = 'admin' OR
  (auth.uid() IS NOT NULL AND EXISTS (
    SELECT 1 FROM auth.users au 
    WHERE au.id = auth.uid() 
    AND au.raw_user_meta_data ->> 'role' = 'admin'
  ))
);

-- =====================================================
-- 3. CORRIGIR POL√çTICAS PROMOTIONS (AMBIGUIDADE FK)
-- =====================================================

\echo 'üîß Corrigindo ambiguidade FK em promotions...';

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "promotions_owner_management" ON public.promotions;
DROP POLICY IF EXISTS "promotions_admin_management" ON public.promotions;

-- Recriar com especifica√ß√£o clara da rela√ß√£o
CREATE POLICY "promotions_owner_access" ON public.promotions
FOR ALL USING (auth.uid() = user_id::uuid);

-- Admin policy sem recurs√£o para promotions
CREATE POLICY "promotions_admin_access" ON public.promotions
FOR ALL USING (
  auth.jwt() ->> 'role' = 'admin'
);

-- =====================================================
-- 4. CORRIGIR POL√çTICAS BRAIDERS
-- =====================================================

\echo 'üîß Corrigindo pol√≠ticas braiders...';

-- Remover pol√≠tica admin problem√°tica
DROP POLICY IF EXISTS "braiders_admin_management" ON public.braiders;

-- Recriar sem recurs√£o
CREATE POLICY "braiders_admin_access" ON public.braiders
FOR ALL USING (
  auth.jwt() ->> 'role' = 'admin'
);

-- =====================================================
-- 5. CORRIGIR POL√çTICAS PRODUCTS
-- =====================================================

\echo 'üîß Corrigindo pol√≠ticas products...';

-- Remover pol√≠tica admin problem√°tica  
DROP POLICY IF EXISTS "products_admin_management" ON public.products;

-- Recriar sem recurs√£o
CREATE POLICY "products_admin_access" ON public.products
FOR ALL USING (
  auth.jwt() ->> 'role' = 'admin'
);

-- =====================================================
-- VERIFICA√á√ÉO DO RESULTADO
-- =====================================================

\echo '';
\echo 'üîç VERIFICANDO POL√çTICAS CORRIGIDAS...';

SELECT 
    schemaname,
    tablename,
    policyname,
    cmd,
    CASE 
        WHEN qual LIKE '%auth.jwt()%' THEN '‚úÖ USA JWT (sem recurs√£o)'
        WHEN qual LIKE '%users%' AND tablename = 'users' THEN '‚ùå POSS√çVEL RECURS√ÉO'
        ELSE '‚úÖ OK'
    END as recursion_check
FROM pg_policies 
WHERE schemaname = 'public'
  AND tablename IN ('users', 'promotions', 'braiders', 'products')
ORDER BY tablename, policyname;

\echo '';
\echo '‚úÖ CORRE√á√ÉO DE RECURS√ÉO RLS CONCLU√çDA!';
\echo 'Pol√≠ticas agora usam auth.jwt() em vez de consultar users recursivamente.';
\echo 'Teste o sistema para confirmar que os erros foram resolvidos.';