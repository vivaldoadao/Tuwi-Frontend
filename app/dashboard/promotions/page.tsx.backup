"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { 
  TrendingUp, 
  Users, 
  Euro, 
  Eye, 
  MousePointer, 
  MessageCircle, 
  Settings,
  Crown,
  Megaphone,
  Gift,
  Star,
  AlertCircle,
  CheckCircle,
  Clock,
  XCircle,
  Loader2,
  Plus,
  Edit,
  Trash2,
  Power,
  PowerOff,
  Package
} from "lucide-react"
import { useAuth } from "@/context/auth-context"
import { toast } from "react-hot-toast"
import { PromotionsRevenueChart } from "@/components/promotions-revenue-chart"

interface PromotionSettings {
  system_enabled: boolean
  payments_enabled: boolean
  free_trial_enabled: boolean
  max_hero_banners: number
  max_highlighted_profiles: number
  auto_approval_profiles: boolean
  hero_requires_approval: boolean
}

interface SystemStats {
  total_promotions: number
  active_promotions: number
  total_revenue: number
  total_views: number
  total_clicks: number
  ctr_percentage: number
  avg_revenue_per_promotion: number
}

interface Promotion {
  id: string
  type: 'profile_highlight' | 'hero_banner' | 'combo_package'
  title: string
  description: string
  status: 'pending' | 'active' | 'expired' | 'cancelled' | 'rejected'
  price: number
  views_count: number
  clicks_count: number
  contacts_count: number
  start_date: string
  end_date: string
  created_at: string
  user: {
    id: string
    email: string
    raw_user_meta_data: any
  }
}

interface PromotionPackage {
  id: string
  name: string
  description: string
  type: 'profile_highlight' | 'hero_banner' | 'combo_package'
  duration_days: number
  price: number
  original_price?: number
  features: string[]
  is_active: boolean
  is_featured?: boolean
  color?: string
  icon?: string
  sort_order?: number
}


export default function PromotionsPage() {
  const { user } = useAuth()
  const [loading, setLoading] = useState(true)
  const [settings, setSettings] = useState<PromotionSettings | null>(null)
  const [stats, setStats] = useState<SystemStats | null>(null)
  const [promotions, setPromotions] = useState<Promotion[]>([])
  const [filteredPromotions, setFilteredPromotions] = useState<Promotion[]>([])
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [typeFilter, setTypeFilter] = useState<string>('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [updatingSettings, setUpdatingSettings] = useState<Record<string, boolean>>({})
  
  // Estados para criação de promoções
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [packages, setPackages] = useState<PromotionPackage[]>([])
  const [selectedPackage, setSelectedPackage] = useState<PromotionPackage | null>(null)
  const [isCreating, setIsCreating] = useState(false)
  
  // Estados para gestão de pacotes
  const [isPackageModalOpen, setIsPackageModalOpen] = useState(false)
  const [editingPackage, setEditingPackage] = useState<PromotionPackage | null>(null)
  const [isPackageLoading, setIsPackageLoading] = useState(false)
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false)
  const [packageToDelete, setPackageToDelete] = useState<PromotionPackage | null>(null)
  const [packageForm, setPackageForm] = useState({
    name: '',
    description: '',
    type: 'profile_highlight' as 'profile_highlight' | 'hero_banner' | 'combo_package',
    duration_days: 7,
    price: 0,
    original_price: 0,
    features: [] as string[],
    is_active: true,
    is_featured: false,
    color: '#3B82F6',
    icon: 'star',
    sort_order: 0
  })
  const [createForm, setCreateForm] = useState({
    title: '',
    description: '',
    start_date: '',
    end_date: '',
    target_type: 'all_users', // 'all_users', 'specific_user', 'role_group'
    target_value: '', // email específico ou role
    package_id: ''
  })

  useEffect(() => {
    if (user?.role === 'admin') {
      fetchData()
    }
  }, [user])

  useEffect(() => {
    filterPromotions()
  }, [promotions, statusFilter, typeFilter, searchTerm])

  const fetchData = async () => {
    try {
      setLoading(true)
      
      // Fetch settings, stats, promotions e packages em paralelo
      const [settingsRes, statsRes, promotionsRes, packagesRes] = await Promise.all([
        fetch('/api/promotions/settings', { credentials: 'include' }),
        fetch('/api/promotions/analytics', { credentials: 'include' }),
        fetch('/api/promotions?limit=100', { credentials: 'include' }),
        fetch('/api/promotions/packages?admin=true', { credentials: 'include' })
      ])

      if (settingsRes.ok) {
        const settingsData = await settingsRes.json()
        const settingsMap = settingsData.settings || {}
        
        setSettings({
          system_enabled: settingsMap.system_enabled?.value === true,
          payments_enabled: settingsMap.payments_enabled?.value === true,
          free_trial_enabled: settingsMap.free_trial_enabled?.value === true,
          max_hero_banners: parseInt(settingsMap.max_hero_banners?.value) || 3,
          max_highlighted_profiles: parseInt(settingsMap.max_highlighted_profiles?.value) || 15,
          auto_approval_profiles: settingsMap.auto_approval_profiles?.value === true,
          hero_requires_approval: settingsMap.hero_requires_approval?.value === true
        })
      }

      if (statsRes.ok) {
        const statsData = await statsRes.json()
        setStats(statsData.stats)
      } else {
        // Fallback stats
        setStats({
          total_promotions: 0,
          active_promotions: 0,
          total_revenue: 0,
          total_views: 0,
          total_clicks: 0,
          ctr_percentage: 0,
          avg_revenue_per_promotion: 0
        })
      }

      if (promotionsRes.ok) {
        const promotionsData = await promotionsRes.json()
        setPromotions(promotionsData.promotions || [])
      }

      if (packagesRes.ok) {
        const packagesData = await packagesRes.json()
        setPackages(packagesData.packages || [])
      }

    } catch (error) {
      console.error('Error fetching data:', error)
      toast.error('Erro ao carregar dados do sistema')
    } finally {
      setLoading(false)
    }
  }

  const filterPromotions = () => {
    let filtered = promotions

    if (statusFilter !== 'all') {
      filtered = filtered.filter(p => p.status === statusFilter)
    }

    if (typeFilter !== 'all') {
      filtered = filtered.filter(p => p.type === typeFilter)
    }

    if (searchTerm) {
      filtered = filtered.filter(p => 
        p.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        p.user.email.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    setFilteredPromotions(filtered)
  }

  const updateSetting = async (key: string, value: any) => {
    // Set loading state for this specific setting
    setUpdatingSettings(prev => ({ ...prev, [key]: true }))
    
    try {
      const response = await fetch('/api/promotions/settings', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ key, value })
      })

      if (!response.ok) throw new Error('Failed to update setting')
      
      // Update settings locally instead of reloading all data
      setSettings(prevSettings => {
        if (!prevSettings) return prevSettings
        return {
          ...prevSettings,
          [key]: value
        }
      })
      
      toast.success(`Configuração ${key} atualizada!`)
      
    } catch (error) {
      console.error('Error updating setting:', error)
      toast.error('Erro ao atualizar configuração')
    } finally {
      // Remove loading state for this setting
      setUpdatingSettings(prev => ({ ...prev, [key]: false }))
    }
  }

  const handlePromotionAction = async (promotionId: string, action: 'approve' | 'reject', reason?: string) => {
    try {
      const status = action === 'approve' ? 'active' : 'rejected'
      const updates: any = { status }
      
      if (action === 'reject' && reason) {
        updates.rejection_reason = reason
      }

      const response = await fetch(`/api/promotions/${promotionId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(updates)
      })

      if (!response.ok) throw new Error('Failed to update promotion')
      
      toast.success(`Promoção ${action === 'approve' ? 'aprovada' : 'rejeitada'}!`)
      fetchData() // Reload data
      
    } catch (error) {
      console.error('Error updating promotion:', error)
      toast.error('Erro ao atualizar promoção')
    }
  }

  // Funções para criação de promoções
  const openCreateModal = () => {
    setIsCreateModalOpen(true)
    // Reset form
    setCreateForm({
      title: '',
      description: '',
      start_date: new Date().toISOString().split('T')[0],
      end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      target_type: 'all_users',
      target_value: '',
      package_id: ''
    })
    setSelectedPackage(null)
  }

  const handlePackageSelect = (packageId: string) => {
    const pkg = packages.find(p => p.id === packageId)
    if (pkg) {
      setSelectedPackage(pkg)
      setCreateForm(prev => ({
        ...prev,
        package_id: packageId,
        title: `${pkg.name} - Promoção Admin`,
        description: pkg.description
      }))
    }
  }

  const handleCreatePromotion = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!selectedPackage) {
      toast.error('Selecione um pacote')
      return
    }

    // Validar target específico
    if (createForm.target_type !== 'all_users' && !createForm.target_value) {
      toast.error('Especifique o alvo da promoção')
      return
    }

    setIsCreating(true)
    try {
      const promotionData = {
        type: selectedPackage.type,
        title: createForm.title,
        description: createForm.description,
        start_date: new Date(createForm.start_date).toISOString(),
        end_date: new Date(createForm.end_date).toISOString(),
        package_id: selectedPackage.id,
        price: selectedPackage.price,
        status: 'active', // Admin cria promoções já ativas
        created_by_admin: true,
        target_type: createForm.target_type,
        target_value: createForm.target_value
      }

      const response = await fetch('/api/promotions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(promotionData)
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Falha ao criar promoção')
      }

      const result = await response.json()
      toast.success('Promoção criada com sucesso!')
      
      // Add to list locally
      if (result.promotion) {
        setPromotions(prev => [result.promotion, ...prev])
      }
      
      setIsCreateModalOpen(false)
    } catch (error) {
      console.error('Error creating promotion:', error)
      toast.error('Erro ao criar promoção')
    } finally {
      setIsCreating(false)
    }
  }

  // Funções para gestão de pacotes
  const openPackageModal = (pkg?: PromotionPackage) => {
    if (pkg) {
      setEditingPackage(pkg)
      setPackageForm({
        name: pkg.name,
        description: pkg.description,
        type: pkg.type,
        duration_days: pkg.duration_days,
        price: pkg.price,
        original_price: (pkg as any).original_price || 0,
        features: pkg.features || [],
        is_active: pkg.is_active,
        is_featured: (pkg as any).is_featured || false,
        color: (pkg as any).color || '#3B82F6',
        icon: (pkg as any).icon || 'star',
        sort_order: (pkg as any).sort_order || 0
      })
    } else {
      setEditingPackage(null)
      setPackageForm({
        name: '',
        description: '',
        type: 'profile_highlight',
        duration_days: 7,
        price: 0,
        original_price: 0,
        features: [],
        is_active: true,
        is_featured: false,
        color: '#3B82F6',
        icon: 'star',
        sort_order: 0
      })
    }
    setIsPackageModalOpen(true)
  }

  const handleSavePackage = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!packageForm.name || !packageForm.description) {
      toast.error('Nome e descrição são obrigatórios')
      return
    }

    setIsPackageLoading(true)
    try {
      const url = editingPackage 
        ? `/api/promotions/packages/${editingPackage.id}`
        : '/api/promotions/packages'
      
      const method = editingPackage ? 'PUT' : 'POST'

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(packageForm)
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Falha ao salvar pacote')
      }

      const result = await response.json()
      
      if (editingPackage) {
        // Update existing package
        setPackages(prev => prev.map(p => 
          p.id === editingPackage.id ? result.package : p
        ))
        toast.success('Pacote atualizado com sucesso!')
      } else {
        // Add new package
        setPackages(prev => [result.package, ...prev])
        toast.success('Pacote criado com sucesso!')
      }
      
      setIsPackageModalOpen(false)
    } catch (error) {
      console.error('Error saving package:', error)
      toast.error('Erro ao salvar pacote')
    } finally {
      setIsPackageLoading(false)
    }
  }

  const openDeleteModal = (pkg: PromotionPackage) => {
    setPackageToDelete(pkg)
    setIsDeleteModalOpen(true)
  }

  const handleDeletePackage = async () => {
    if (!packageToDelete) return

    try {
      const response = await fetch(`/api/promotions/packages/${packageToDelete.id}`, {
        method: 'DELETE',
        credentials: 'include'
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Falha ao deletar pacote')
      }

      setPackages(prev => prev.filter(p => p.id !== packageToDelete.id))
      toast.success('Pacote deletado com sucesso!')
      setIsDeleteModalOpen(false)
      setPackageToDelete(null)
    } catch (error) {
      console.error('Error deleting package:', error)
      toast.error('Erro ao deletar pacote')
    }
  }

  const handleTogglePackage = async (packageId: string, currentStatus: boolean) => {
    try {
      const response = await fetch(`/api/promotions/packages/${packageId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ is_active: !currentStatus })
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Falha ao atualizar pacote')
      }

      const result = await response.json()
      setPackages(prev => prev.map(p => 
        p.id === packageId ? result.package : p
      ))
      
      toast.success(`Pacote ${!currentStatus ? 'ativado' : 'desativado'} com sucesso!`)
    } catch (error) {
      console.error('Error toggling package:', error)
      toast.error('Erro ao atualizar status do pacote')
    }
  }

  const getStatusBadge = (status: string) => {
    const variants = {
      pending: { color: 'bg-yellow-100 text-yellow-800', icon: Clock, label: 'Pendente' },
      active: { color: 'bg-green-100 text-green-800', icon: CheckCircle, label: 'Ativa' },
      expired: { color: 'bg-gray-100 text-gray-800', icon: AlertCircle, label: 'Expirada' },
      cancelled: { color: 'bg-red-100 text-red-800', icon: XCircle, label: 'Cancelada' },
      rejected: { color: 'bg-red-100 text-red-800', icon: XCircle, label: 'Rejeitada' }
    }

    const variant = variants[status as keyof typeof variants] || variants.pending
    const Icon = variant.icon

    return (
      <Badge className={variant.color}>
        <Icon className="h-3 w-3 mr-1" />
        {variant.label}
      </Badge>
    )
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'profile_highlight': return Crown
      case 'hero_banner': return Megaphone
      case 'combo_package': return Gift
      default: return Star
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Carregando sistema de promoções...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold font-heading text-gray-900 flex items-center gap-3">
            <TrendingUp className="h-8 w-8 text-green-600" />
            Sistema de Promoções
          </h1>
          <p className="text-gray-600 mt-1">
            Gerencie promoções, configurações e monitore o desempenho
          </p>
        </div>
        
        <div className="flex gap-2">
          <Button 
            onClick={openCreateModal}
            className="bg-green-600 hover:bg-green-700"
          >
            <Plus className="h-4 w-4 mr-2" />
            Criar Promoção
          </Button>
          <Button
            variant="outline" 
            onClick={fetchData}
            disabled={loading}
          >
            Atualizar Dados
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Promoções</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.total_promotions}</div>
              <p className="text-xs text-muted-foreground">
                {stats.active_promotions} ativas
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Receita Total</CardTitle>
              <Euro className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">€{stats.total_revenue}</div>
              <p className="text-xs text-muted-foreground">
                €{stats.avg_revenue_per_promotion}/promoção
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Visualizações</CardTitle>
              <Eye className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.total_views.toLocaleString()}</div>
              <p className="text-xs text-muted-foreground">
                {stats.total_clicks.toLocaleString()} clicks
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Taxa de Clique</CardTitle>
              <MousePointer className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.ctr_percentage}%</div>
              <p className="text-xs text-muted-foreground">
                CTR geral do sistema
              </p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Main Content */}
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">Visão Geral</TabsTrigger>
          <TabsTrigger value="promotions">Promoções</TabsTrigger>
          <TabsTrigger value="packages">Pacotes</TabsTrigger>
          <TabsTrigger value="revenue">Receitas</TabsTrigger>
          <TabsTrigger value="settings">Configurações</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* System Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  Status do Sistema
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span>Sistema de Promoções</span>
                  <Badge className={settings?.system_enabled ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                    {settings?.system_enabled ? 'Ativo' : 'Inativo'}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span>Cobrança de Pagamentos</span>
                  <Badge className={settings?.payments_enabled ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'}>
                    {settings?.payments_enabled ? 'Ativa' : 'Gratuito'}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span>Teste Gratuito</span>
                  <Badge className={settings?.free_trial_enabled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>
                    {settings?.free_trial_enabled ? 'Habilitado' : 'Desabilitado'}
                  </Badge>
                </div>
              </CardContent>
            </Card>

            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle>Ações Rápidas</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button 
                  className="w-full" 
                  onClick={() => updateSetting('payments_enabled', !settings?.payments_enabled)}
                  variant={settings?.payments_enabled ? "destructive" : "default"}
                  disabled={updatingSettings.payments_enabled}
                >
                  {updatingSettings.payments_enabled ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Atualizando...
                    </>
                  ) : (
                    settings?.payments_enabled ? 'Desativar Cobrança' : 'Ativar Modo Pago'
                  )}
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full"
                  onClick={() => updateSetting('system_enabled', !settings?.system_enabled)}
                  disabled={updatingSettings.system_enabled}
                >
                  {updatingSettings.system_enabled ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Atualizando...
                    </>
                  ) : (
                    settings?.system_enabled ? 'Desativar Sistema' : 'Ativar Sistema'
                  )}
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full"
                  onClick={fetchData}
                >
                  Atualizar Dados
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Promotions Tab */}
        <TabsContent value="promotions" className="space-y-6">
          {/* Filters */}
          <Card>
            <CardHeader>
              <CardTitle>Filtrar Promoções</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                  <Label>Buscar</Label>
                  <Input
                    placeholder="Título ou email..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                <div>
                  <Label>Status</Label>
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Todos</SelectItem>
                      <SelectItem value="pending">Pendentes</SelectItem>
                      <SelectItem value="active">Ativas</SelectItem>
                      <SelectItem value="expired">Expiradas</SelectItem>
                      <SelectItem value="cancelled">Canceladas</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Tipo</Label>
                  <Select value={typeFilter} onValueChange={setTypeFilter}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Todos</SelectItem>
                      <SelectItem value="profile_highlight">Perfil Destaque</SelectItem>
                      <SelectItem value="hero_banner">Banner Hero</SelectItem>
                      <SelectItem value="combo_package">Combo</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-end">
                  <Button onClick={() => {
                    setSearchTerm('')
                    setStatusFilter('all')
                    setTypeFilter('all')
                  }}>
                    Limpar
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Promotions List */}
          <Card>
            <CardHeader>
              <CardTitle>Promoções ({filteredPromotions.length})</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {filteredPromotions.map((promotion) => {
                  const TypeIcon = getTypeIcon(promotion.type)
                  
                  return (
                    <div key={promotion.id} className="border rounded-lg p-4 space-y-3">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <TypeIcon className="h-5 w-5 text-blue-600" />
                          </div>
                          <div>
                            <h3 className="font-semibold">{promotion.title}</h3>
                            <p className="text-sm text-gray-600">{promotion.user?.email || 'Email não disponível'}</p>
                            <p className="text-sm text-gray-500">{promotion.description}</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {getStatusBadge(promotion.status)}
                          <Badge variant="outline">€{promotion.price}</Badge>
                        </div>
                      </div>

                      {/* Metrics */}
                      <div className="flex items-center gap-6 text-sm text-gray-600">
                        <span className="flex items-center gap-1">
                          <Eye className="h-4 w-4" />
                          {promotion.views_count} views
                        </span>
                        <span className="flex items-center gap-1">
                          <MousePointer className="h-4 w-4" />
                          {promotion.clicks_count} clicks
                        </span>
                        <span className="flex items-center gap-1">
                          <MessageCircle className="h-4 w-4" />
                          {promotion.contacts_count} contatos
                        </span>
                      </div>

                      {/* Actions for pending promotions */}
                      {promotion.status === 'pending' && (
                        <div className="flex gap-2 pt-2 border-t">
                          <Button
                            size="sm"
                            onClick={() => handlePromotionAction(promotion.id, 'approve')}
                            className="bg-green-600 hover:bg-green-700"
                          >
                            Aprovar
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handlePromotionAction(promotion.id, 'reject', 'Rejeitada pelo administrador')}
                          >
                            Rejeitar
                          </Button>
                        </div>
                      )}
                    </div>
                  )
                })}

                {filteredPromotions.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <TrendingUp className="h-12 w-12 mx-auto mb-3 opacity-50" />
                    <p>Nenhuma promoção encontrada com os filtros selecionados</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Packages Tab */}
        <TabsContent value="packages" className="space-y-6">
          <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Package className="h-5 w-5 text-blue-600" />
                    📦 Gestão de Pacotes do Marketplace
                  </CardTitle>
                  <p className="text-gray-700 mt-1">
                    <strong>Configure os produtos</strong> que as trancistas podem comprar no marketplace
                  </p>
                </div>
                <Button onClick={() => openPackageModal()} className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="h-4 w-4 mr-2" />
                  Novo Pacote
                </Button>
              </div>
              <div className="flex items-center gap-2 text-sm text-blue-700 bg-blue-100 p-2 rounded-lg mt-2">
                <Settings className="h-4 w-4" />
                Total de pacotes: {packages.length} • Ativos: {packages.filter(p => p.is_active).length} • Inativos: {packages.filter(p => !p.is_active).length}
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {packages.map((pkg) => {
                  const TypeIcon = getTypeIcon(pkg.type)
                  const packageColor = pkg.color || '#3B82F6'
                  
                  return (
                    <Card key={pkg.id} className={`relative overflow-hidden hover:shadow-lg transition-shadow ${!pkg.is_active ? 'opacity-75' : ''}`}>
                      {/* Featured Badge */}
                      {pkg.is_featured && (
                        <div className="absolute top-4 right-4 z-10">
                          <Badge className="bg-yellow-500 text-white">
                            <Star className="h-3 w-3 mr-1" />
                            Popular
                          </Badge>
                        </div>
                      )}
                      
                      {/* Status Badge */}
                      <div className="absolute top-4 left-4 z-10">
                        <Badge className={pkg.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                          {pkg.is_active ? 'Ativo' : 'Inativo'}
                        </Badge>
                      </div>
                      
                      {/* Color Strip */}
                      <div 
                        className="absolute top-0 left-0 right-0 h-2"
                        style={{ backgroundColor: packageColor }}
                      />

                      <CardHeader className="pt-12">
                        <div className="flex items-center gap-3">
                          <div 
                            className="p-3 rounded-lg text-white"
                            style={{ backgroundColor: packageColor }}
                          >
                            <TypeIcon className="h-6 w-6" />
                          </div>
                          <div>
                            <CardTitle className="text-lg">{pkg.name}</CardTitle>
                            <p className="text-sm text-gray-500">{pkg.duration_days} dias</p>
                          </div>
                        </div>
                      </CardHeader>

                      <CardContent className="space-y-4">
                        <p className="text-gray-600">{pkg.description}</p>

                        {/* Price */}
                        <div className="flex items-center gap-2">
                          <div className="text-3xl font-bold">€{pkg.price}</div>
                          {pkg.original_price && pkg.original_price > pkg.price && (
                            <div className="text-gray-500 line-through">€{pkg.original_price}</div>
                          )}
                        </div>

                        {/* Features */}
                        <div className="space-y-2">
                          <p className="font-medium text-sm">Inclui:</p>
                          <ul className="space-y-1">
                            {pkg.features.slice(0, 4).map((feature, index) => (
                              <li key={index} className="flex items-center gap-2 text-sm">
                                <CheckCircle className="h-4 w-4 text-green-500" />
                                <span>{feature.replace('_', ' ')}</span>
                              </li>
                            ))}
                            {pkg.features.length > 4 && (
                              <li className="text-sm text-gray-500">
                                +{pkg.features.length - 4} funcionalidades
                              </li>
                            )}
                          </ul>
                        </div>

                        {/* Type */}
                        <div className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
                          Tipo: {
                            pkg.type === 'profile_highlight' ? 'Perfil em Destaque' :
                            pkg.type === 'hero_banner' ? 'Banner Hero' :
                            pkg.type === 'combo_package' ? 'Pacote Combo' : pkg.type
                          }
                        </div>

                        {/* Admin Actions */}
                        <div className="flex items-center gap-2 pt-2 border-t">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleTogglePackage(pkg.id, pkg.is_active)}
                            className="flex-1"
                          >
                            {pkg.is_active ? (
                              <>
                                <PowerOff className="h-4 w-4 mr-1" />
                                Desativar
                              </>
                            ) : (
                              <>
                                <Power className="h-4 w-4 mr-1" />
                                Ativar
                              </>
                            )}
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => openPackageModal(pkg)}
                            className="flex-1"
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Editar
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => openDeleteModal(pkg)}
                            className="text-red-500 hover:text-red-700 hover:bg-red-50"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  )
                })}

                {packages.length === 0 && (
                  <div className="col-span-full text-center py-12 text-gray-500">
                    <Package className="h-16 w-16 mx-auto mb-4 opacity-30" />
                    <h3 className="text-lg font-semibold mb-2">Nenhum pacote criado ainda</h3>
                    <p className="text-sm mb-4">Crie o primeiro pacote para o marketplace</p>
                    <Button 
                      onClick={() => openPackageModal()} 
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Criar Primeiro Pacote
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Revenue Tab */}
        <TabsContent value="revenue" className="space-y-6">
          <PromotionsRevenueChart />
        </TabsContent>

        {/* Settings Tab */}
        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Configurações do Sistema</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {settings && (
                <>
                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base">Sistema de Promoções</Label>
                      <p className="text-sm text-gray-500">Ativar/desativar todo o sistema</p>
                    </div>
                    <div className="flex items-center gap-2">
                      {updatingSettings.system_enabled && (
                        <Loader2 className="h-4 w-4 animate-spin text-gray-500" />
                      )}
                      <Switch
                        checked={settings.system_enabled}
                        onCheckedChange={(checked) => updateSetting('system_enabled', checked)}
                        disabled={updatingSettings.system_enabled}
                        className={updatingSettings.system_enabled ? "opacity-50" : ""}
                      />
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base">Cobrança de Pagamentos</Label>
                      <p className="text-sm text-gray-500">Ativar modo pago ou manter gratuito</p>
                    </div>
                    <div className="flex items-center gap-2">
                      {updatingSettings.payments_enabled && (
                        <Loader2 className="h-4 w-4 animate-spin text-gray-500" />
                      )}
                      <Switch
                        checked={settings.payments_enabled}
                        onCheckedChange={(checked) => updateSetting('payments_enabled', checked)}
                        disabled={updatingSettings.payments_enabled}
                        className={updatingSettings.payments_enabled ? "opacity-50" : ""}
                      />
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base">Teste Gratuito</Label>
                      <p className="text-sm text-gray-500">Permitir período gratuito para novos usuários</p>
                    </div>
                    <div className="flex items-center gap-2">
                      {updatingSettings.free_trial_enabled && (
                        <Loader2 className="h-4 w-4 animate-spin text-gray-500" />
                      )}
                      <Switch
                        checked={settings.free_trial_enabled}
                        onCheckedChange={(checked) => updateSetting('free_trial_enabled', checked)}
                        disabled={updatingSettings.free_trial_enabled}
                        className={updatingSettings.free_trial_enabled ? "opacity-50" : ""}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>Máximo de Banners Hero</Label>
                      <Input
                        type="number"
                        value={settings.max_hero_banners}
                        onChange={(e) => updateSetting('max_hero_banners', parseInt(e.target.value))}
                        min={1}
                        max={10}
                      />
                    </div>
                    <div>
                      <Label>Máximo de Perfis em Destaque</Label>
                      <Input
                        type="number"
                        value={settings.max_highlighted_profiles}
                        onChange={(e) => updateSetting('max_highlighted_profiles', parseInt(e.target.value))}
                        min={5}
                        max={50}
                      />
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base">Aprovação Automática - Perfis</Label>
                      <p className="text-sm text-gray-500">Aprovar perfis destacados automaticamente</p>
                    </div>
                    <Switch
                      checked={settings.auto_approval_profiles}
                      onCheckedChange={(checked) => updateSetting('auto_approval_profiles', checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base">Requer Aprovação - Hero</Label>
                      <p className="text-sm text-gray-500">Banners do hero precisam aprovação manual</p>
                    </div>
                    <Switch
                      checked={settings.hero_requires_approval}
                      onCheckedChange={(checked) => updateSetting('hero_requires_approval', checked)}
                    />
                  </div>
                </>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Modal de Criação de Promoção */}
      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
        <DialogContent className="max-w-4xl w-full mx-auto">
          <DialogHeader>
            <DialogTitle>Criar Nova Promoção</DialogTitle>
            <DialogDescription>
              Crie uma promoção para todos os usuários, um usuário específico ou um grupo
            </DialogDescription>
          </DialogHeader>

          <form onSubmit={handleCreatePromotion} className="space-y-4">
            {/* Primeira linha: Pacote e Público Alvo */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>Selecionar Pacote</Label>
                <Select value={createForm.package_id} onValueChange={handlePackageSelect}>
                  <SelectTrigger>
                    <SelectValue placeholder="Escolha um pacote..." />
                  </SelectTrigger>
                  <SelectContent>
                    {packages.map(pkg => (
                      <SelectItem key={pkg.id} value={pkg.id}>
                        {pkg.name} - €{pkg.price} ({pkg.duration_days} dias)
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>Público Alvo</Label>
                <Select value={createForm.target_type} onValueChange={(value) => 
                  setCreateForm(prev => ({ ...prev, target_type: value, target_value: '' }))
                }>
                  <SelectTrigger>
                    <SelectValue placeholder="Escolha o público alvo..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all_users">🌍 Todos os Usuários</SelectItem>
                    <SelectItem value="specific_user">👤 Usuário Específico</SelectItem>
                    <SelectItem value="role_group">👥 Grupo por Role</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Campo adicional baseado no targeting */}
            {createForm.target_type === 'specific_user' && (
              <div>
                <Label>Email do Usuário</Label>
                <Input
                  type="email"
                  value={createForm.target_value}
                  onChange={(e) => setCreateForm(prev => ({ 
                    ...prev, 
                    target_value: e.target.value 
                  }))}
                  placeholder="usuario@example.com"
                />
              </div>
            )}

            {createForm.target_type === 'role_group' && (
              <div>
                <Label>Grupo de Usuários</Label>
                <Select value={createForm.target_value} onValueChange={(value) => 
                  setCreateForm(prev => ({ ...prev, target_value: value }))
                }>
                  <SelectTrigger>
                    <SelectValue placeholder="Escolha o grupo..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="braider">🪄 Trancistas</SelectItem>
                    <SelectItem value="customer">🛍️ Clientes</SelectItem>
                    <SelectItem value="admin">⚙️ Administradores</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}

            {/* Segunda linha: Título e Descrição lado a lado */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>Título da Promoção</Label>
                <Input
                  value={createForm.title}
                  onChange={(e) => setCreateForm(prev => ({ 
                    ...prev, 
                    title: e.target.value 
                  }))}
                  placeholder="Título da promoção..."
                />
              </div>

              <div>
                <Label>Descrição</Label>
                <Textarea
                  value={createForm.description}
                  onChange={(e) => setCreateForm(prev => ({ 
                    ...prev, 
                    description: e.target.value 
                  }))}
                  placeholder="Descrição da promoção..."
                  rows={2}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label>Data de Início</Label>
                <Input
                  type="date"
                  value={createForm.start_date}
                  onChange={(e) => setCreateForm(prev => ({ 
                    ...prev, 
                    start_date: e.target.value 
                  }))}
                />
              </div>
              <div>
                <Label>Data de Fim</Label>
                <Input
                  type="date"
                  value={createForm.end_date}
                  onChange={(e) => setCreateForm(prev => ({ 
                    ...prev, 
                    end_date: e.target.value 
                  }))}
                />
              </div>
            </div>

            {selectedPackage && (
              <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                <h4 className="font-medium text-green-800">{selectedPackage.name}</h4>
                <p className="text-sm text-green-600">
                  €{selectedPackage.price} • {selectedPackage.duration_days} dias
                </p>
                <p className="text-xs text-green-600 mt-1">
                  {selectedPackage.description}
                </p>
              </div>
            )}

            {/* Preview do público alvo */}
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <h4 className="font-medium text-blue-800">Público Alvo</h4>
              <p className="text-sm text-blue-600">
                {createForm.target_type === 'all_users' && '🌍 Esta promoção será aplicada a todos os usuários do sistema'}
                {createForm.target_type === 'specific_user' && createForm.target_value && 
                  `👤 Promoção específica para: ${createForm.target_value}`}
                {createForm.target_type === 'specific_user' && !createForm.target_value && 
                  '👤 Digite o email do usuário específico'}
                {createForm.target_type === 'role_group' && createForm.target_value === 'braider' && 
                  '🪄 Promoção para todos os trancistas'}
                {createForm.target_type === 'role_group' && createForm.target_value === 'customer' && 
                  '🛍️ Promoção para todos os clientes'}
                {createForm.target_type === 'role_group' && createForm.target_value === 'admin' && 
                  '⚙️ Promoção para todos os administradores'}
                {createForm.target_type === 'role_group' && !createForm.target_value && 
                  '👥 Selecione o grupo de usuários'}
              </p>
            </div>

            <DialogFooter>
              <Button 
                type="button"
                variant="outline" 
                onClick={() => setIsCreateModalOpen(false)}
              >
                Cancelar
              </Button>
              <Button type="submit" disabled={isCreating}>
                {isCreating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Criando...
                  </>
                ) : (
                  'Criar Promoção'
                )}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Modal de Criação/Edição de Pacote */}
      <Dialog open={isPackageModalOpen} onOpenChange={setIsPackageModalOpen}>
        <DialogContent className="max-w-5xl w-full mx-auto max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              {editingPackage ? 'Editar Pacote' : 'Criar Novo Pacote'}
            </DialogTitle>
            <DialogDescription>
              {editingPackage 
                ? 'Atualize as informações do pacote de promoção'
                : 'Configure um novo pacote de promoção para o marketplace'
              }
            </DialogDescription>
          </DialogHeader>

          <form onSubmit={handleSavePackage} className="space-y-6">
            {/* Layout em 2 colunas principais */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Coluna Esquerda - Formulário */}
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>Nome do Pacote</Label>
                    <Input
                      value={packageForm.name}
                      onChange={(e) => setPackageForm(prev => ({ 
                        ...prev, 
                        name: e.target.value 
                      }))}
                      placeholder="Ex: Perfil Destaque Básico"
                      required
                    />
                  </div>

                  <div>
                    <Label>Tipo de Promoção</Label>
                    <Select 
                      value={packageForm.type} 
                      onValueChange={(value: any) => 
                        setPackageForm(prev => ({ ...prev, type: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="profile_highlight">
                          <div className="flex items-center gap-2">
                            <Crown className="h-4 w-4" />
                            Perfil em Destaque
                          </div>
                        </SelectItem>
                        <SelectItem value="hero_banner">
                          <div className="flex items-center gap-2">
                            <Megaphone className="h-4 w-4" />
                            Banner Hero
                          </div>
                        </SelectItem>
                        <SelectItem value="combo_package">
                          <div className="flex items-center gap-2">
                            <Gift className="h-4 w-4" />
                            Pacote Combo
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div>
                  <Label>Descrição</Label>
                  <Textarea
                    value={packageForm.description}
                    onChange={(e) => setPackageForm(prev => ({ 
                      ...prev, 
                      description: e.target.value 
                    }))}
                    placeholder="Descrição detalhada do pacote..."
                    rows={3}
                    required
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>Preço Final (€)</Label>
                    <Input
                      type="number"
                      min="0"
                      step="0.01"
                      value={packageForm.price}
                      onChange={(e) => setPackageForm(prev => ({ 
                        ...prev, 
                        price: parseFloat(e.target.value) || 0
                      }))}
                      placeholder="0.00"
                    />
                  </div>
                  
                  <div>
                    <Label>Preço Original (€) - Opcional</Label>
                    <Input
                      type="number"
                      min="0"
                      step="0.01"
                      value={packageForm.original_price}
                      onChange={(e) => setPackageForm(prev => ({ 
                        ...prev, 
                        original_price: parseFloat(e.target.value) || 0
                      }))}
                      placeholder="0.00"
                    />
                    <p className="text-xs text-gray-500 mt-1">Para mostrar desconto</p>
                  </div>
                </div>

                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <Label>Duração (dias)</Label>
                    <Input
                      type="number"
                      min="1"
                      value={packageForm.duration_days}
                      onChange={(e) => setPackageForm(prev => ({ 
                        ...prev, 
                        duration_days: parseInt(e.target.value) || 1
                      }))}
                      placeholder="7"
                    />
                  </div>

                  <div>
                    <Label>Cor do Tema</Label>
                    <Input
                      type="color"
                      value={packageForm.color}
                      onChange={(e) => setPackageForm(prev => ({ 
                        ...prev, 
                        color: e.target.value 
                      }))}
                    />
                  </div>

                  <div>
                    <Label>Ordem de Exibição</Label>
                    <Input
                      type="number"
                      min="0"
                      value={packageForm.sort_order}
                      onChange={(e) => setPackageForm(prev => ({ 
                        ...prev, 
                        sort_order: parseInt(e.target.value) || 0
                      }))}
                      placeholder="0"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-6">
                  <div className="flex items-center space-x-2">
                    <Switch
                      checked={packageForm.is_active}
                      onCheckedChange={(checked) => setPackageForm(prev => ({ 
                        ...prev, 
                        is_active: checked 
                      }))}
                    />
                    <Label className="text-sm">Pacote Ativo</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Switch
                      checked={packageForm.is_featured}
                      onCheckedChange={(checked) => setPackageForm(prev => ({ 
                        ...prev, 
                        is_featured: checked 
                      }))}
                    />
                    <Label className="text-sm">Pacote Popular</Label>
                  </div>
                </div>

                <div>
                  <Label>Características (uma por linha)</Label>
                  <Textarea
                    value={packageForm.features.join('\n')}
                    onChange={(e) => setPackageForm(prev => ({ 
                      ...prev, 
                      features: e.target.value.split('\n').filter(f => f.trim()) 
                    }))}
                    placeholder="Destaque na página inicial&#10;Badge especial no perfil&#10;Prioridade nas buscas&#10;Analytics avançados"
                    rows={4}
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Digite uma característica por linha. Linhas vazias serão ignoradas.
                  </p>
                </div>
              </div>

              {/* Coluna Direita - Preview */}
              <div className="space-y-4">
                <div className="sticky top-0">
                  {/* Preview */}
                  <div className="p-4 bg-gray-50 border rounded-lg">
              <h4 className="font-medium text-gray-800 mb-2">Preview do Pacote</h4>
              <div className="space-y-3">
                {/* Simular o card como aparece no marketplace */}
                <div className="border rounded-lg overflow-hidden bg-white">
                  {/* Color strip */}
                  <div 
                    className="h-2 w-full"
                    style={{ backgroundColor: packageForm.color }}
                  />
                  
                  {/* Badges */}
                  <div className="relative p-4">
                    {packageForm.is_featured && (
                      <div className="absolute top-2 right-2">
                        <Badge className="bg-yellow-500 text-white text-xs">
                          <Star className="h-3 w-3 mr-1" />
                          Popular
                        </Badge>
                      </div>
                    )}
                    
                    <div className="absolute top-2 left-2">
                      <Badge className={packageForm.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                        {packageForm.is_active ? 'Ativo' : 'Inativo'}
                      </Badge>
                    </div>

                    {/* Icon and title */}
                    <div className="flex items-center gap-3 mt-8">
                      <div 
                        className="p-2 rounded-lg text-white"
                        style={{ backgroundColor: packageForm.color }}
                      >
                        {packageForm.type === 'profile_highlight' && <Crown className="h-5 w-5" />}
                        {packageForm.type === 'hero_banner' && <Megaphone className="h-5 w-5" />}
                        {packageForm.type === 'combo_package' && <Gift className="h-5 w-5" />}
                      </div>
                      <div>
                        <h3 className="font-semibold">{packageForm.name || 'Nome do Pacote'}</h3>
                        <p className="text-sm text-gray-500">{packageForm.duration_days} dias</p>
                      </div>
                    </div>

                    <p className="text-sm text-gray-600 mt-3">
                      {packageForm.description || 'Descrição do pacote...'}
                    </p>

                    {/* Price */}
                    <div className="flex items-center gap-2 mt-3">
                      <span className="text-2xl font-bold">€{packageForm.price}</span>
                      {packageForm.original_price > packageForm.price && (
                        <span className="text-gray-500 line-through">€{packageForm.original_price}</span>
                      )}
                    </div>

                    {/* Features */}
                    {packageForm.features.length > 0 && (
                      <div className="mt-3">
                        <p className="text-xs font-medium text-gray-700 mb-1">Inclui:</p>
                        <ul className="space-y-1">
                          {packageForm.features.slice(0, 3).map((feature, idx) => (
                            <li key={idx} className="flex items-center gap-2 text-xs">
                              <CheckCircle className="h-3 w-3 text-green-500" />
                              <span>{feature}</span>
                            </li>
                          ))}
                          {packageForm.features.length > 3 && (
                            <li className="text-xs text-gray-500">
                              +{packageForm.features.length - 3} funcionalidades
                            </li>
                          )}
                        </ul>
                      </div>
                    )}

                    {/* Type and order */}
                    <div className="flex items-center justify-between mt-3 pt-2 border-t text-xs text-gray-500">
                      <span>Tipo: {
                        packageForm.type === 'profile_highlight' ? 'Perfil Destaque' :
                        packageForm.type === 'hero_banner' ? 'Banner Hero' :
                        packageForm.type === 'combo_package' ? 'Combo' : 'N/A'
                      }</span>
                      <span>Ordem: {packageForm.sort_order}</span>
                    </div>
                  </div>
                </div>
                </div>
              </div>
            </div>

            <DialogFooter>
              <Button 
                type="button"
                variant="outline" 
                onClick={() => setIsPackageModalOpen(false)}
              >
                Cancelar
              </Button>
              <Button type="submit" disabled={isPackageLoading}>
                {isPackageLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Salvando...
                  </>
                ) : (
                  editingPackage ? 'Atualizar Pacote' : 'Criar Pacote'
                )}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Modal de Confirmação de Deletar */}
      <Dialog open={isDeleteModalOpen} onOpenChange={setIsDeleteModalOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-red-600">
              <AlertCircle className="h-5 w-5" />
              Confirmar Exclusão
            </DialogTitle>
            <DialogDescription>
              Esta ação não pode ser desfeita. O pacote será removido permanentemente.
            </DialogDescription>
          </DialogHeader>

          {packageToDelete && (
            <div className="py-4">
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-center gap-3">
                  <div 
                    className="p-2 rounded-lg text-white"
                    style={{ backgroundColor: (packageToDelete as any).color || '#DC2626' }}
                  >
                    {packageToDelete.type === 'profile_highlight' && <Crown className="h-4 w-4" />}
                    {packageToDelete.type === 'hero_banner' && <Megaphone className="h-4 w-4" />}
                    {packageToDelete.type === 'combo_package' && <Gift className="h-4 w-4" />}
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-900">{packageToDelete.name}</h4>
                    <p className="text-sm text-red-700">€{packageToDelete.price} • {packageToDelete.duration_days} dias</p>
                  </div>
                </div>
              </div>
              
              <div className="mt-4 text-sm text-gray-600">
                <p><strong>Tem certeza que deseja deletar este pacote?</strong></p>
                <ul className="list-disc list-inside mt-2 space-y-1">
                  <li>O pacote será removido permanentemente</li>
                  <li>Não será mais visível no marketplace</li>
                  <li>Promoções ativas que usam este pacote não serão afetadas</li>
                </ul>
              </div>
            </div>
          )}

          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => {
                setIsDeleteModalOpen(false)
                setPackageToDelete(null)
              }}
            >
              Cancelar
            </Button>
            <Button 
              variant="destructive"
              onClick={handleDeletePackage}
              disabled={isPackageLoading}
            >
              {isPackageLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Deletando...
                </>
              ) : (
                <>
                  <Trash2 className="mr-2 h-4 w-4" />
                  Deletar Pacote
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}